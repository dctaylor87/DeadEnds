\input texinfo
@setfilename python-internals
@titlepage
@settitle DeadEnds Python Extension Internals Manual
@setchapternewpage odd
@titlefont{DeadEnds Python Extension Internals}
@author David Cole Taylor
@today{}
@page
@end titlepage
@page
@syncodeindex vr fn
@syncodeindex tp fn
@contents

@chapter DeadEnds Internals

@section Overview
This document concerns itself with the needs of those that wish to
modify DeadEnds -- whether to extend the Python embedding or fix a
bug in it -- or to modify the core of DeadEnds.

The focus is on understanding the Python embedding and the DeadEnds
code that it is embedded in well enough to modify the embedding,
whether to extend it or to fix bugs in it.

If your goal is to USE the Python embedding, then please consult the
document ``DeadEnds Python Extension''.  If your goal is to use the
DeadEnds Report Writing language, then please consult the document
``DeadEnds Programming Subsystem and Report Generator''.

Much of the Python internals knowledge needed is covered by the
documents ``Extending and Embedding Python'' and ``The Python/C API''
which are part of the standard Python distribution.  They were
consulted heavily during the implementation of the DeadEnds Python
extension.

The other large knowledge base needed is knowledge of DeadEnds
internals.  When I started the Python embedding project, there was a
dearth of information available on LifeLines internals and DeadEnds
had not yet been released.  There is more internals information
available for DeadEnds than for LifeLines.  This document is an
attempt to partially fill in some of the holes.

While some of the information presented is specific to the Python
embedding, most should be useful to anyone wishing to modify DeadEnds.
That said, the functions, variables, and macros documented are those
that I encountered during the implementation of the Python embedding
for LifeLines and subsequent port to DeadEnds.  If I didn't encounter
it, it is likely not documented here.

There are many many gaps here.  If a knowledge or understanding of
something was not needed as part of the Python embedding project, you
will probably not find it here unless it was added at a later date.
For example, there was no need to study the lexing and parsing of the
DeadEnds report writing language, so you won't find anything about
that here.  Nor, was there much need to study the disk layout of the
LifeLines database -- beyond high level functions for activities such
as importing, exporting, and related activities.  And DeadEnds keeps
everything in memory, so any such description would be largely wrong
for DeadEnds.

This document is meant to supplement, not replace, the DeadEnds
GitHub Markdown files.

While this document was written primarily for those wishing to modify
the Python specific portions of DeadEnds, the bulk of this document
concerns the code of DeadEnds and should be of value to those
modifying the core of DeadEnds.

Due to its origin, there are portions of this document that still use
LifeLines terminology or that have a LifeLines perspective.  If you
notice them, please feel free to point them out.

It is my hope that this document will grow and improve over time.
Feedback, additions, and corrections are both welcomed and encouraged.

Feedback can be given directly to me, via GitHub, or (if they do not
object), the the LINES-L mailing list.
@section Layout

There are a number of subsystems each in its own subdirectory.  Here
is a description of the subdirectories.

@subsection Libraries

The library directories are found in the @file{DeadEndsLib} directory.

@itemize @bullet
@item @file{DeadEndsLib/DataTypes}

Implementations of most of the various datatypes that are part of the
DeadEnds system.  A notable exception is the @code{Sequence} type
which is found in @file{DeadEndsLib/Interp}.

@item @file{DeadEndsLib/Database}

The code for the database itself.

@item @file{DeadEndsLib/Gedcom}

Most of the code for doing GEDCOM related things to the database lives
here.

@item @file{DeadEndsLib/Interp}

The code that implements the user callable builtin functions of the
DeadEnds Report writing language.  If you are looking for the
implementation of a builtin DeadEnds Script function, the file
@file{builtin.c} is the place to start.  The dispatch table is found
in @file{functable.c}.  Declarations of the builtin functions can be
found in @file{builtintable.h}.

@item @file{DeadEndsLib/LLSupport}

Code to support the LifeLines @command{llines} and @command{llexec}
commands.  Much of this code was taken from various LifeLines
directories, such as @file{src/gedlib} and @file{src/stdlib} and then
modified for DeadEnds.  Some is original to DeadEnds.

@item @file{DeadEndsLib/Parser}

The code that implements the lexing and the parsing of the DeadEnds
Report writing language.

@item @file{DeadEndsLib/Python}

Support for the Python embedding.

@item @file{DeadEndsLib/UI}

User interface, obviously.  Less obviously, the code here is used by
@command{llexec} and not by @command{llines}.  Some of the routines
here are mere stubs of their more fleshed out cousins that live in
@code{LifeLines}.  Stubs that should be, in my opinion, fleshed out.

The long term goal is for the bulk of the code to be user interface
independent and instead provide an abstraction layer between the
various user interfaces -- so that most code does not need to know nor
care whether the user interface is curses, textual, graphical, or
something else.

@item @file{DeadEndsLib/Utils}

Not a subsystem, as such, but rather a collection of routines that are
meant to be generically useful across different subsystems.  Some of the
routines are implementations of functionality that is available on
many systems, but not everywhere.

@item @file{DeadEndsLib/Validate}

Code for validating a GEDCOM file that is being imported.

@end itemize

@subsection Programs

@itemize @bullet
@item @file{Lifelines}

The code for the commands @command{llines} and @command{llexec} lives
here.  The code that deals with the screen (via @code{ncurses}), the
various menus, the user interaction, and various routines that do not
have a better location to live.  Most of this code was taken from the
@file{src/liflines} directory of LifeLines and then modified to build
and work with DeadEnds.  Some comes from other directories and some is
original to DeadEnds.

Some of the user interaction code lives instead in
@file{DeadEndsLib/UI} or @file{DeadEndsLib/LLSupport}.  The division
of code between these three directories needs work and should probably
be considered a work in progress.
@item @file{Programs}

Various programs that link with the DeadEnds code.  You can find a
DeadEnds version of @command{llexec} in this directory called
@command{deadends}.

@item @file{Partition}

A small program for finding the disjoint partitions within a database.
@item @file{PatchSex}

Small program for examining a GEDCOM database and patching the
@code{SEX} lines.

@item @file{RandomizeKeys}

Small program for reading a GEDCOM database and writing it back out
with new random keys.

@item @file{TestProgram}

Programs for testing DeadEnds.

@end itemize

@subsection Miscellaneous
@itemize @bullet
@item @file{Docs}

Various documentation files about DeadEnds.  Look in a subdirectory
matching a top level directory or a DeadEndsLib directory for markdown
information about what is implemented in that directory.

In Manual you will find some Texinfo documentation such as this document.

@item @file{Gedfiles}

GEDCOM files that are used (by the programs in TestProgram) in testing
the DeadEnds code.

@item @file{Scripts}

DeadEnds script language programs.  In LifeLines this was called @file{reports}
Currently this is populated with some test scripts rather than user reports.

@item @file{TeX}
An attempt, so far fairly unsuccessful to TeXify the markdown files
found in @file{Docs}.
@item @file{build}

Files used by the build system tools to aid in the use of
@command{autoconf}, @command{automake}, and @command{autoheader}.

@end itemize

@section Python Files

For the Python embedding, the emphasis is on records, not nodes.  The
header files live in @file{DeadEndsLib/Python/Includes}.

@itemize @bullet

@item @file{Makefile.am}

Simple makefile saying which files belong to the Python extension and
the name of the library that contains the compiled files.

@item @file{Makefile.in}

Boring.  Generated by automake.  @b{DO NOT EDIT.}  If you edit, your
changes @b{WILL BE LOST} the next time that @command{automake} is run.

@item @file{database.c}, @file{database.h}

Contains database centric routines such as @code{firstindi}, @code{lastindi},
@code{firstfam}, and @code{lastfam}.
@findex firstindi
@findex lastindi
@findex firstfam
@findex lastfam

@item @file{event.c}

Event (GNode, not RECORD) and date specific routines are found here.

@item @file{family.c}, @file{family.h}

Most everythiing that deals with FAM records.

@item @file{iter.c}, @file{iter.h}

Iterators for individual, family, source, event, and other records are
found here.

@item @file{nodes.c}

Node specific code.  Code for obtaining the values of various fields
as seen in the textual database, such as the level, the xref, the tag,
and the value.  Also code for traversing the in memory tree, copying a
subset of the tree, or iterating over part of the tree.

@item @file{other.c}

Allocation of , deallocation of, and iteration over OTHR records.

@item @file{person.c}, @file{person.h}

Most everything that deals with INDI records.  Might ought to be
renamed to individual.[ch].

@item @file{python-to-c.c}, @file{python-to-c.h}

Contains PyInit_llines, llpy_init, and a handful of functions and
variables that don't really fit anywhere else.

@item @file{records.c}

Functions which are record type agnostic, for example the function
@code{key_to_record} is found here.

@item @file{run.c}

Functions for running the Python interpreter -- whetther interactively
or on a file are found here.

@item @file{set.c}, @file{set.h}

Non-instance functions that take or return sets.

@item @file{source.c}

Allocation, deallocation, and iteration of SOUR records.

@item @file{types.c}, @file{types.h}

Rich compare functions for records and nodes.  Hash function for records.

@item @file{user.c}

Those user interaction functions which are not instance methods can be
found in here.

@end itemize

@section Nodes and Records

The DeadEnds Report Writing language primarily deals with nodes.  By
contrast, the Python Extension primarily deals with records.

Both nodes and records are reference counted.  When creating a
reference to a GNode it is important to ensure that its reference
count is incremented.  And when destroying a reference, that it is
decremented.

NOTE: The GNode reference counts @b{DO NOT} include references from
other GNodes, such as the parent, sibling, and child links.  Nor the
links from a RecordIndex to its GNodes.  The reference counts @b{DO}
count the number of @code{PVALUE}s and @code{PyObject}s that point to
the GNode.

Additionally, GNodes have a flags element.  Only one flag bit is
currently defined -- whether the GNode is a temporary GNode or not.  A
temporary GNode is a GNode that is not part of the GNode tree of any
record.

@subsection Temporary GNodes

Temporary nodes are created by @code{createTempGNode}.  They are
freed by @code{freeTempGNodeTree}.  The @{ temp | non-temp @} status
can be tested by calling @code{isTempGNode}.  And the @{ temp |
non-temp @} status can be @{ set | cleared @} by calling
@code{setTempGNode}.

Temporary nodes, when created, are marked with flag @code{ND_TEMP}.

When one node is made the @{ parent | child @} of another node, the @{
temp | non-temp @} status of the parent is @b{NOT} propagated to the
new child(ren).  It should be.  This is a @b{BUG}.

When the reference count of a node is @{ incremented | decremented @},
that change is not propagated down the tree.  It should be.  This is a
@b{BUG}.

When the reference count for a temporary node reaches zero, it, its
children, and their siblings are all freed -- without checking their
reference counts.  Oops.  Another @b{BUG}.

@section Application Programmer Interfaces

The lists of functions, macros, and variables in the following
chapters are @b{very} incomplete.  They are largely the result of
investigations made to facilitate adding Python as a scripting
language.  Additions and corrections are both encouraged and welcomed.

@chapter GEDCOM Subsystem

These entries are found in the @code{Gedcom} directory.

@section GNodes

@subsection Tree Related GNode Functions and Macros

The following functions and macros are defined in the
@file{DeadEndsLib/Gedcom} directory.

@defmac nchild (GNode *node) @arrow{} GNode*
Given a GNode @code{node}, return its first child.
Defined in @file{gnode.h}

NOTE: This is "child" in the tree sense, @b{NOT} the genealogical sense.
@end defmac

@defmac nsibling (GNode *node) @arrow{} GNode*
Given a GNode @code{node}, return its first sibling.
Defined in @file{gnode.h}

NOTE: This is "sibling" in the tree sense, @b{NOT} the genealogical sense.
@end defmac

@defmac nparent (GNode *node) @arrow{} GNode*
Given a GNode @code{node}, return its parent.
Defined in @file{gnode.h}

NOTE: This is "parent" in the tree sense, @b{NOT} the genealogical sense.
@end defmac

@defmac nval (GNode* node)
Given a GNode @code{node}, return its value.
Defined in @file{gnode.h}
@end defmac

@defmac ntag (GNode* node)
Given a GNode @code{node}, return its tag.
Defined in @file{gnode.h}
@end defmac

@defmac nxref (GNode* node)
Given a GNode @code{node}, return its xref.
Defined in @file{gnode.h}
@end defmac

@deftypefun GNode* findTag (GNode *node, CString str) @arrow{}
Given a GNode *@code{node}, check its tag and that of each of its
siblings until either the tag @code{str} is found or we run out of
siblings.  If we find it, we return a pointer to the node, otherwise
we return NULL.
Defined in @file{gnode.c}, declared in @file{gnode.h}.
@end deftypefun

@deftypefun GNode* copyNodes (GNode *node, bool kids, bool sibs)
A copy of @code{node} is made and returned.  If @code{kids} is true,
then the copy has copies of the children as well.  If @code{sibs} is
true, then the copy has copies of the siblings as well.
Defined in @file{gnode.c}, declared in @file{gnode.h}.
@end deftypefun

@deftypefun GNode* copy_node_subtree (GNode *node)
Returns a copy of the tree rooted at @code{node}.
@end deftypefun

@deftypefun GNode* createGNode (String xref, String tag, String value, GNode* parent)
Creates a new node with the specified @code{xref}, @code{tag},
@code{value}, and @code{parent}.  Returns the new node.
Defined in @file{gnode.c}, declared in @file{gnode.h}.
@end deftypefun

@deftypefun GNode* createTempGNode (String xref, String tag, String value, GNode* parent)
Creates a new node with the specified @code{xref}, @code{tag},
@code{value}, and @code{parent}.  Sets the @code{ND_TEMP} bit in the
flags, and returns the new node.
@end deftypefun

@deftypefun bool equalTree (GNode* root1, GNode* root2)
Compares the tags and values of each node of the trees rooted at
@code{root1} and @code{root2}.  Returns true if they are all equal,
false otherwise.
Defined in @file{nodeutls.c}, declared in @file{nodeutils.h}.
@end deftypefun

@deftypefun void free_nodes (GNode* node)
Frees @code{node}, all of its descendants, all of its siblings, and
all of their descendants.  Does @b{NOT} check reference counts.
@end deftypefun

@deftypefun bool isTempGNode (GNode* node)
Tests the @code{ND_TEMP} bit of @code{node}'s flags.  If set, it
returns true, otherwise it returns false.
@end deftypefun

@deftypefun void setTempGNode (GNode* node, bool temp)
If @code{temp} is true, sets @code{node}'s @code{ND_TEMP} flag.
Otherwise clears the flag.
@end deftypefun

@deftypefun int gNodesLength (GNode* node)
Returns the length of the sibling chain of @code{node}.
@end deftypefun

@deftypefun GNode* stringToGNodeTree (String str, ErrorLog *errorLog)
Reads tree from @code{str}.  Modifies @code{str} -- adds NULs between
lines.  Might make other changes to @code{str}.

Definition found in #file{readnode.c}, declaration in
@file{readnode.h}.  Both are, currently, commented out.
@end deftypefun

@subsection GEDCOM GNode Functions And Macros

These functions live in the @file{DeadEndsLib/Gedcom} directory.

@deftypefun GNode* familyToFirstChild (GNode* node, Database* database) @arrow{} top GNode* of first child

Given a GNode* @code{node} for a family, returns the top GNode* of the first child.
If there are no children, NULL is returned.

Defined in @file{lineage.c}, declared in @file{lineage.h}.
@end deftypefun

@deftypefun GNode* familyToLastChild (GNode* node, Database* database) @arrow{} top GNode* of last child
Given a GNode @code{node} for a family, returns the top GNode* of the last child.
If there are no children, NULL is returned.

Defined in @file{lineage.c}, declared in @file{lineage.h}.
@end deftypefun

@defmac FAMS (GNode* indi) @arrow{} GNode*
Given an individual @code{indi}, return the tree pointed to by the
first @code{FAMS} GNode.  Returns NULL if there are none.
@end defmac

@deftypefun GNode* personToFamilyAsChild (GNode* indi, Database* database) @arrow{} GNode*
Returns the top GNode* of the tree pointed to by the first @code{FAMC}
node of @code{indi}.

Defined in @file{lineage.c}, declared in @file{gnode.h}.
@end deftypefun

@deftypefun GNode* personToFather (GNode* indi, Database* database) @arrow{} GNode*
Returns the father of @code{indi}.

More precisely, returns the top-node of the first @code{HUSB} node of
the family represented by the first @code{FAMC} node of this
individual.

Assumes that @code{indi} is the top-node of an INDI record.

Defined in @file{lineage.c}, declared in @file{lineage.h}.
@end deftypefun

@deftypefun GNode* personToMother (GNode* indi, Database* database) @arrow{} GNode*
Returns the mother of @code{indi}.

More precisely, returns the top-node of the first @code{WIFE} node of
the family represented by the first @code{FAMC} node of this
individual.

Assumes that @code{indi} is the top-node of an INDI record.

Defined in @file{lineage.c}, declared in @file{lineage.h}.
@end deftypefun

@deftypefun GNode* personToExtSibling (GNode*)
Returns the next sibling of a person.  This is the next @code{CHIL} in
the first @code{FAMC} of the person.

Defined in @file{lineage.c}, declared in @file{lineage.h}.
@end deftypefun

@deftypefun GNode* personToPreviousSibling (GNode*)
Returns the previous sibling of a person.  This is the previous
@code{CHIL} in the first @code{FAMC} of the person.

Defined in @file{lineage.c}, declared in @file{lineage.h}.
@end deftypefun

@subsection Database Functions

These functions live in the @file{DeadEndsLib/Database} directory.

@deftypefun GNode* keyToFamily (CString key, Database* database)
Returns the @code{FAM} record having key @code{key} from
@code{database}.  If not found, NULL is returned.
Defined in @file{database.c}, declared in @file{database.h}.
@end deftypefun

@deftypefun GNode* keyToPerson (CString key, Database* database)
Returns the @code{INDI} record having key @code{key} from
@code{database}.  If not found, NULL is returned.
Defined in @file{database.c}, declared in @file{database.h}.
@end deftypefun

@deftypefun void replace_indi (GNode* cur_indi, GNode* new_indi)
Replaces a person, @code{cur_indi}, in database with a modified
version, @code{new_indi}.  Replaces all chilkdren nodes of
@code{cur_indi} with children nodes of @code{new_indi}.  Consumes
@code{new_indi} (calls @code{free_node} on it).
@end deftypefun

@deftypefun int resolve_refn_links (GNode* node)
Checks and attempts to resolve all links in the node tree having
@code{node} as its parent.  This convets something like
@code{"<1850.Census>"} to something like @code{"@@S25@@"}.  Returns
the number of unresolved links.
@end deftypefun

@deftypefun bool valid_indi_tree (GNode* indi, String *pmsg, GNode* orig)
Validates the INDI tree having top-node @code{indi}.  If @code{orig}
is non-NULL, it is the original version of the individual.  If
problems are found, false is returned and @code{pmsg} is set to a
message indicating what problem was found.  Otherwise, true is
returned.
@end deftypefun

@deftypefun int val_to_sex (GNode* node)
Converts @code{node}'s SEX value to one of the three integer constants
@code{SEX_UNKNOWN}, @code{SEX_MALE}, or @code{SEX_FEMALE}.  Assumes
@code{node}'s tag is @code{SEX}.
@end deftypefun

@subsection Sequence GNode Functions

@deftypefun Sequence* familyToChildren (GNode* fam, Database* database)
Create a sequence of @code{fam}'s children.
@end deftypefun

@deftypefun INDISEQ fam_to_spouses (GNode* fam)
Creates a sequence of spouses of @code{fam}.
@end deftypefun

@deftypefun Sequence* personToChildren (GNode* indi, Database* database)
Creates a sequence of @code{indi}'s children.
@end deftypefun

@deftypefun Sequence* personToFamilies (GNode* indi, bool fams, Database* database)
Creates a sequence of @code{indi}'s families.  Values will be input
person key.  If @code{fams} is true, find spousal families, else find
parental families.
@end deftypefun

@deftypefun Sequence* personToSpouses (GNode* indi, Database* database)
Creates a sequence of @code{indi}'s spouses.  Values will be family
keys.
@end deftypefun

@deftypefun void deleteSequence (Sequence* seq)
Frees @code{seq} and all the memory used by it.
@end deftypefun

@subsection GNode Reference Counts

At one level, reference counts are only meaningful for temporary
nodes.  A 'permanent' node is not freed unless the containing record
is freed.

However...

A permanent node can be detached, at which time it is then a temporary
node (ditto for its children and their siblings), not a permanent
node, and therefore subject to being freed if it has a zero reference
count.

Since a permanent node may at any time be detached and therefore
become a temporary node, the reference count needs to kept correct at
all times for all nodes.

The reference count does @b{NOT} reflect references from within the
node tree itself.  Nor does it reflect references from records.  It
@b{DOES} reflect references from the DeadEnds Report Writing language
(@code{PVALUE}'s) and reference from within Python (from within
@code{PyObject}'s).

@defmac get_nrefcnt (node) @arrow{} int
Given a GNode* @code{node}, returns the reference count of the GNode.
@end defmac

@defmac nrefcnt_inc (node) @arrow{} int
Given a GNode* @code{node}, increments the reference count and returns
the new reference count of the GNode.
@end defmac

@defmac nrefcnt_dec (node) @arrow{} int
Given a GNode* @code{node}, decrements the reference count and returns
the new reference count of the GNode.
@end defmac

@section GNode to Record traversal
@deftypefun GNode* node_to_record (GNode* node) @arrow{} RECORD

Returns the RECORD that contains GNode @code{node}.
@end deftypefun

@section RECORD Functions 
@subsection Information about a Record
@deftypefun GNode* nztop (GNode *record)
Returns the top node of @code{record}.
@end deftypefun

@deftypefun CString nzkey (GNode *record)
Returns @code{record}'s key.
@end deftypefun

@defmac RecordType nztype (GNode *record)
Returns @code{record}'s type.
@end defmac

@subsection RECORD Reference Counts

@deftypefun void release_record (GNode *record)
Decrement reference count of @code{record} and free the record if the
reference count reaches zero.
@end deftypefun

@section NAME Related

These functions live in the @file{DeadEndsLib/Gedcom} directory.

@deftypefun CString getsxsurname (CString)
Returns surname for use by soundex routines.  Uses a static buffer.
And returns ____ if the first non-white space character of the surname
is not a letter.
@end deftypefun

@deftypefun CString getasurname (CString)
Returns a surname.  Uses a static buffer.
@end deftypefun

@deftypefun CString givens (CString name)
Returns the given names of @code{name}.  Uses a static buffer.
@end deftypefun

@deftypefun CString soundex (CString)
Computes and returns the traditional soundex for the given surname.
Defined in @file{name.c}, declared in @file{name.h}.
@end deftypefun

@deftypefun String manipulateName (String name, bool caps, bool preserve_order, int len)
Manipulates the @code{name} according to the arguments.

Argument @code{caps} says whether to return the surname in all caps (if @code{true})
or as found in @code{name} (if @code{false}).

Argument @code{preserve_order} says whether the preserve the order in
@code{name} (if @code{true}) or to reorder as surname comma
rest-of-name (if @code{false}).

Argument @code{len} says the maximum length for the returned result.
Regardless of the value of @code{len}, the surname will not be
truncated and at least the first initial will be included in the result.
@end deftypefun

@deftypefun String trimName (String name, int len)
Trim GEDCOM name, @code{name} to less than or equal to given length,
@code{len}, but no shorter than first initial and surname.
Defined in @file{name.c}, declared in @file{name.h}.
@end deftypefun

@section DataBase Functions and Variables

@subsection Database Traversal Functions
@deftypefun int xref_@{next|prev@}@{i|f|s|e|x@} (int keynum) @arrow{} int
@findex xref_nexti
@findex xref_nextf
@findex xref_nexts
@findex xref_nexte
@findex xref_nextx
@findex xref_previ
@findex xref_prevf
@findex xref_prevs
@findex xref_preve
@findex xref_prevx
Given @{ an individual | a family | a source | an event | an other @}
record's keynum, return the keynum of the @{ next | previous @}
@{ individual | family | source | event | other @} record in keynum order.

Keynums are never negative.  Zero is reserved for NOT FOUND / DOES NOT
EXIST.
@end deftypefun

@deftypefun int xref_@{next|prev@} (char ntype, int keynum) @arrow{} int
@findex xref_next
@findex xref_prev
@code{ntype} is one of @code{'I'}, @code{'F'}, @code{'S'}, @code{'E'},
or @code{'X'}.  This just calls the appropriate xref_@{next|prev@}@{i|f|s|e|x@}
function and returns the result.
@end deftypefun

@deftypefun int xref_@{first|last@}@{i|f|s|e|x@} (void) @arrow{} int
@findex xref_firsti
@findex xref_firstf
@findex xref_firsts
@findex xref_firste
@findex xref_firstx
@findex xref_lasti
@findex xref_lastf
@findex xref_lasts
@findex xref_laste
@findex xref_lastx
Return the keynum of the @{ first | last @} @{individual | family |
source | event | other @} in the database.
@end deftypefun

@section Database Variables

@defvar readonly

When set, the current database was opened in read-only mode and changes are not premitted.
@end defvar

@section Keys and Keynums

The following functions are defined in directory @file{DeadEndsLib/Database}.

@deftypefun GNode* keyToPersonRecord (CString key, Database* database)
@deftypefunx GNode* keyToFamilyRecord (CString key, Database* database)
@deftypefunx GNode* keyToSourceRecord (CString key, Database* database)
@deftypefunx GNode* keyToEventRecord (CString key, Database* database)
@deftypefunx GNode* keyToOtherRecord (CString key, Database* database)
Looks for a GNode* of the given type having the specified key.
On success, returns an addref'd record.  On failure, returns NULL.
Defined in @file{database.c}, declared in @file{database.h}.
@end deftypefun

@deftypefun GNode* keynum_to_frecord (int keynum)
@deftypefunx GNode* keynum_to_irecord (int keynum)
@deftypefunx GNode* keynum_to_record (char ntype, int keynum)
Looks for a GNode* of the specified type having the specifed keynum.
If found, returns the record.  Otherwise returns NULL.
@end deftypefun

@section Date, Place, and Event Functions

@deftypefun int date_get_year (GDATEVAL gdv)
@end deftypefun

@deftypefun String date_get_year_string (GDATEVAL gdv)
@end deftypefun

@deftypefun String event_to_date (GNode* node, bool shrt)
Convert an event to a date, where @code{node} is the event node and
the short form is used if @code{shrt} is true.
@end deftypefun

@deftypefun GDATEVAL extract_date (String str)
Extracts date from the free format string @code{str}, returns a parsed
date in a newly allocated GDATEVAL.
@end deftypefun

@deftypefun void free_gdateval (GDATEVAL gdb)
Free a GDATEVAL and all the memory allocated to it.
@end deftypefun

@deftypefun String shorten_date (String date)
Returns a short form of @code{date}.  Uses a static buffer.
@end deftypefun

@deftypefun String event_to_plac (GNode* node, bool shrt)
Convert an event to a place, where @code{node} is the event node and
the short form is used if @code{shrt} is true.
@end deftypefun

@deftypefun String event_to_string (GNode* node, RFMT rfmt)
Convert an event to a string.  Finds @code{DATE} and @code{PLAC} nodes
within @code{node}'s tree and prints a string representation of them.
@code{rfmt} is reformatting info (may be NULL).
@end deftypefun

@deftypefun String shorten_plac (String plac)
Return short form of @code{plac}.  Returns modified input string or
value from @code{placabbr} table.
@end deftypefun

@section Miscellaneous Functions

@subsection DeadEnds Options

@deftypefun int getlloptint (CString optname, int defval) @arrow{} int
Looks up the integer option @code{optname}.  If found, its value is
returned, otherwise @code{defval} is returned.
@end deftypefun

@deftypefun String getlloptstr (CString optname, String defval) @arrow{} String
Looks up the string option @code{optname}.  If found, its value is
returned, otherwise @code{defval} is returned.
@end deftypefun

@subsection String Functions

@deftypefun String rmvat (CString str)
Remove @code{@@}'s from both ends of @code{str}.  Returns a static
buffer.
@end deftypefun

@deftypefun String nameString (CString name)
Removes slashes from a GEDCOM name.  Returns a static buffer.
Defined in @file{name.c}, declared in @file{name.h}.
@end deftypefun

@section Variables and Constants
@subsection Messages and Other Strings

To facilitate translation, many -- but not all -- of the strings
printed by LifeLines were collected into one file --
@file{gedlib/messages.c}.  That file appears in DeadEnds as @file{LLSupport/messages.c}.
Some of these strings represent warning and
error messages, some are menu choices, and others are words and
phrases, such as ``born'', ``died'', and ``married'' that are used in
various contexts.

There are over 600 ``messages''.  They are defined in
@file{messages.c} and declared in @file{messages.h}.  Both are found
in the @file{DeadEndsLib/LLSupport} tree.

All of the ``messages'', such as:

@defvr Message qSaskstr
@end defvr
@defvr Message qSchoostrttl
@end defvr
@defvr Message qSifonei
@end defvr
@defvr Message qSnotonei
@end defvr

have variable names that start with @code{qS}.

@subsection Miscellaneous Variables

@deftypevar bool uu8
Flag indicating whether internal codeset is UTF-8 or not.

While LifeLines was internationalized, DeadEnds has not yet been
internationalized.  So, currently, this variable is meaningless.  But,
it might be meaningful in the future.
@end deftypevar

@chapter Interpreter Subsystem

These entries are found in the @code{Interp} directory.

@section User Interface Wrappers
The functions in this section are used by the reporting writing
functions to wrap the user interaction so as to be able to give a more
accurate timing of how long a script takes to run.  The wrapper
computes the time waiting for a response from the user, but otherwise
does nothing but call the wrapped function.

@defun rptui_init(void) @arrow{} void
Initializes for the collection of timing information.
@end defun

@defun rptui_elapsed(void) @arrow{} int
Returns the timing information.
@end defun

Each of the following functions wraps a function with the same name
and signature but without the @code{rptui_} prefix.

@defun rptui_ask_for_fam (String s1, String s2, Database *database) @arrow{} RECORD
@end defun
@defun rptui_ask_for_indi (String ttl, ASK1Q ask1) @arrow{} RECORD
@end defun
@defun rptui_ask_for_int (String ttl, int *prtn) @arrow{} bool
@end defun
@defun rptui_ask_for_indi_list (String ttl, bool reask) @arrow{} INDISEQ
@end defun
@defun rptui_ask_for_indi (String ttl, ASK1Q ask1) @arrow{} RECORD
@end defun
@defun rptui_ask_for_indi_key (String ttl, ASK1Q ask1) @arrow{} String
@end defun
@defun rptui_ask_for_int (String, int *) @arrow{} bool 
@end defun
@defun rptui_ask_for_output_file (String mode, String ttl, String *pfname, String *pfullpath, String path, String ext) @arrow{} FILE*
@end defun
@defun rptui_ask_for_program (String mode, String ttl, String *pfname, String *pfullpath, String path, String ext, bool picklist) @arrow{} bool
@end defun
@defun rptui_choose_from_array (String ttl, int no, String *pstrngs) @arrow{} int
@end defun
@defun rptui_prompt_stdout (String prompt) @arrow{} int
@end defun
@defun rptui_view_array (String ttl, int no, String *pstrngs) @arrow{} void
@end defun

@section Miscellaneous Interpreter Functions

Nothing here yet.

@chapter Python Subsystem

These entries are found in the @file{DeadEndsLib/Python} directory.

@section Initialization Functions

@deftypefun void llpy_database_init (void)
@deftypefunx void llpy_event_init (void)
@deftypefunx void llpy_iter_init (void)
@deftypefunx void llpy_nodes_init (void)
@deftypefunx void llpy_person_init (void)
@deftypefunx void llpy_records_init (void)
@deftypefunx void llpy_set_init (void)
@deftypefunx void llpy_user_init (void)
These are the initialization routines for the respective files.

These functions have one caller -- @code{PyInit_llines} -- found in
file @file{Python/python-to-c.c}.
@end deftypefun

@section Deallocation Functions
@deftypefun void llpy_event_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_events}.
@end deftypefun
@deftypefun void llpy_family_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_families}.
@end deftypefun
@deftypefun void llpy_individual_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_individuals}.
@end deftypefun
@deftypefun void llpy_iter_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_}.
@end deftypefun
@deftypefun void llpy_node_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_}.
@end deftypefun
@deftypefun void llpy_nodeiter_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_nodeiter}.
@end deftypefun
@deftypefun void llpy_other_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_others}.
@end deftypefun
@deftypefun void llpy_source_dealloc (PyObject *self)
Deallocates the iterator created by @code{llpy_sources}.
@end deftypefun

@section Iterator Functions

@deftypefun LLINES_PY_ITER* llpy_events (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{events}.
Returns an iterator, an instance of @code{llines.Iter}, for EVEN RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_families (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{families}.
Returns an iterator, an instance of @code{llines.Iter}, for FAM RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_individuals (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{individuals}.
Returns an iterator, an instance of @code{llines.Iter}, for INDI RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_others (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{others}.
Returns an iterator, an instance of @code{llines.Iter}, for OTHR RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_sources (PyObject *self, PyObject *args)
Implementation of the @code{llines} module function @code{sources}.
Returns an iterator, an instance of @code{llines.Iter}, for SOUR RECORDS.
@end deftypefun

@deftypefun LLINES_PY_ITER* llpy_iter_iter (PyObject *self)
This is the @code{tp_iter} function for the @code{llines.Iter} type.
When invoked it simply returns its argument.
@end deftypefun

@deftypefun PyObject* llpy_iter_iternext (PyObject *self)
This is the @code{tp_iternext} function for the @code{llines.Iter}
type.  If the iterator was previously exhaused, it sets exception and
returns NULL.  Otherwise it calls @code{xref_next} to get the keynum
of the next RECORD of the specified type.  If the iterator is
exhausted, it returns NULL, otherwise it looks up the RECORD and
returns a pointer to a Python Object that points to the RECORD.
@end deftypefun

@deftypefun PyObject* llpy_nodeiter (PyObject *self, PyObject *args, PyObject *kw)
Implementation of the @code{llines} module function @code{nodeiter}.
@end deftypefun
@deftypefun PyObject* llpy_nodeiter_iter (PyObject *self)
This is the @code{tp_iter} function for the @code{llines.NodeIter} type.
When invoked it simply returns its argument.
@end deftypefun
@deftypefun PyObject* llpy_nodeiter_iternext (PyObject *self)
Iterates on a node tree in accordance with the arguments supplied when
the iterator was created.
@end deftypefun

@section Types

Types can be approached from two perspectives -- the C perspective and
the Python perspective.

For a C perspective, there are five types defined by the Python
extension:

@itemize @bullet
@item LLINES_PY_NODE
@tindex LLINES_PY_NODE

This contains two DeadEnds specific fields -- @code{lln_node}, a
pointer to a GNode and, when known, @code{lln_type} records the type of
the RECORD that contains the GNode.  When the record type is unknown,
which is often, the @code{lln_type} field is initialized to zero.
The @code{lln_type} field might be eliminated in the future.

@item LLINES_PY_RECORD
@tindex LLINES_PY_RECORD

Like LLINES_PY_NODE, this contains two DeadEnds specific fields --
@code{llr_record} and @code{llr_type}.  The field @code{llr_record}
points to a RECORD.  And the field @code{llr_type} contains the type
of the RECORD.  The type is @b{always} known.

@item LLINES_PY_ITER
@tindex LLINES_PY_ITER

This contains two DeadEnds specific fields -- @code{li_type} and
@code{li_current}.  The @code{li_type} records the type of RECORD
being iterated over.  And the @code{li_current} records the keynum of
the most recently returned RECORD.  If no iteration has occurred, the
value is 0.  If it has been exhaused, the value is -1.

@item LLINES_PY_NODEITER
@tindex LLINES_PY_NODEITER

This is used for iterating over GNodeS.  And there is more than one
type of GNode iteration.  As a result, this type is more complex and
has five DeadEnds specific fields:

@itemize
@item @code{ni_top_node}

This is the top of the GNode tree being iterated over.

@item @code{ni_cur_node}

This is the most recently returned GNode.  If iteration has not
started, this is NULL.

@item @code{ni_tag}

When iterating, if we are looking for a specific tag, this is that
tag.  Otherwise this is NULL.  When it is non-NULL, only nodes having
a matching tag will be returned.
@item @code{ni_type}

This is the type of GNode iteration to perform: There is child
iteration, where we iterate over the immediate children of the top
node.  And there is whole tree iteration, where we iterate over all
the nodes in the tree.  When doing whole tree iteration, we do depth
first, parent before child.

@item @code{ni_level}

This records how far we are from the top node of the tree being
iterated over.  For whole tree iteration it is part of the return
value.  Before we start it will be 0.  After exhaustion it will be -1.
@end itemize

@item LLINES_PY_DATABASE
@tindex LLINES_PY_DATABASE

This is used for database types.  Currently there is only one database
instance -- the current database.  This exists for the future when
there are multiple databases.

@end itemize

From a Python perspective, the types are:

@itemize @bullet
@item @code{llines.Database}
@tindex llines.Database
@item @code{llines.Event}
@tindex llines.Event
@item @code{llines.Family}
@tindex llines.Family
@item @code{llines.Individual}
@tindex llines.Individuals
@item @code{llines.Iter}
@tindex llines.Iter
@item @code{llines.NodeIter}
@tindex llines.NodeIter
@item @code{llines.Node}
@tindex llines.Node
@item @code{llines.Other}
@tindex llines.Other
@item @code{llines.Source}
@tindex llines.Source
@end itemize
@section Variables

The following arrays define instance methods of their datatype:

@deftypevar PyMethodDef Lifelines_Event_Methods
Static variable defined in @file{Python/event.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Family_Methods
Static variable defined in @file{Python/family.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Iter_Methods
Static variable defined in @file{Python/iter.c}.
@end deftypevar
@deftypevar PyMethodDef Liflines_Node_Methods
Static variable defined in @file{Python/nodes.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Other_Methods
Static variable defined in @file{Python/other.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Person_Methods
Static variable defined in @file{Python/person.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Source_Methods
Static variable defined in @file{Python/source.c}.
@end deftypevar

@sp 1
The following arrays define additional @code{llines} module functions:

@deftypevar PyMethodDef Lifelines_Database_Functions
Static variable defined in @file{Python/database.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Date_Functions
Static variable defined in @file{Python/event.c}.
@end deftypevar
@deftypevar PyMethodDef Liflines_Node_Functions
Static variable defined in @file{Python/nodes.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Person_Functions
Static variable defined in @file{Python/person.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Records_Functions
Static variable defined in @file{Python/records.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_Set_Functions
Static variable defined in @file{Python/set.c}.
@end deftypevar
@deftypevar PyMethodDef Lifelines_User_Functions
Static variable defined in @file{Python/user.c}.
@end deftypevar

@sp 1
The following variables define the @code{llines} module types that are
added to Python by the DeadEnds extension:

@deftypevar PyTypeObject llines_database_type
Definition of Python type @code{llines.Database}.
@end deftypevar
@deftypevar PyTypeObject llines_event_type
Definition of Python type @code{llines.Event}.
@end deftypevar
@deftypevar PyTypeObject llines_family_type
Definition of Python type @code{llines.Family}.
@end deftypevar
@deftypevar PyTypeObject llines_individual_type
Definition of Python type @code{llines.Individual}.
@end deftypevar
@deftypevar PyTypeObject llines_iter_type
Definition of Python type @code{llines.Iter}.
@end deftypevar
@deftypevar PyTypeObject llines_node_type
Definition of Python type @code{llines.Node}.
@end deftypevar
@deftypevar PyTypeObject llines_nodeiter_type
Definition of Python type @code{llines.NodeIter}.
@end deftypevar
@deftypevar PyTypeObject llines_other_type
Definition of Python type @code{llines.Other}.
@end deftypevar
@deftypevar PyTypeObject llines_record_type
Definition of Python type @code{llines.Record}.
@end deftypevar
@deftypevar PyTypeObject llines_source_type
Definition of Python type @code{llines.Source}.
@end deftypevar

@chapter Utils Subsystem

These entries are found in the @file{DeadEndsLib/Utils} directory.

@deftypefun String get_lifelines_version (int maxlen)
Returns DeadEnds version string using a static buffer.  Truncates
result to smaller of buffer size or @code{maxlen}.
@end deftypefun

@deftypefun FILE* fopenpath (CString name, String mode, String path, String ext, int utf8, String *pfname)
Search the directories in @code{path} for @code{name}, using extension
@code{ext} if necessary.  The file is opened with mode @code{mode}.
The pathname opened is returned in @code{pfname}.

@b{WARNING}: If the file is not found and iis being opened in a mode
other than read-only and @code{name} is not absolute nor
@code{./something}, then it will be created in the first directory of
@code{path} with @code{ext} appended.
@end deftypefun

@chapter DeadEnds Program

These entries are found in the @file{Lifelines} directory.

@section User Interaction
@deftypefun GNode* ask_for_fam (String pttl, String sttl, Database *database)
Ask user to identify family by spouses.  String @code{pttl} is a
prompt to identify a spouse in the family.  String @code{sttl} is a
prompt to identify a child in the family.
@end deftypefun

@deftypefun GNode* ask_for_indi (String ttl, ASK1Q ask1)
Ask user to identify sequence and select a person.  String @code{ttl}
is a title for the question.  And @code{ask1q} says whether to present
the list if only one individual matches.
@end deftypefun

@deftypefun bool ask_for_int (String ttl, int *prtn)
Ask user to provide an integer.  @code{ttl} is the title prompt.
Value is returned in @code{prtn}.  Return value is true if a value is
returned.  And false if the user canceled the operation.
@end deftypefun

@deftypefun bool ask_for_string (CString ttl, CString prompt, String buffer, int buflen)
Ask the user for a string.  The title of the question (first line) is
@code{ttl} and the prompt of the question (second line) is
@code{prompt}.  The response is placed in @code{buffer} and, if
necessary, truncated to @code{buflen}.  The return value indicates
whether the user provided an answer (true) or canceled (false).
@end deftypefun

@deftypefun GNode* chooseFromSequence (INDISEQ seq, ASK1Q ask1, String titl1, String titln)
Format sequence and have user choose from it (any type).  This handles
bad pointers.  Here, @code{seq} is the sequence from which to choose,
@code{ask1} is whether to prompt if only one element is in the
sequence, @code{titl1} is the title if sequence only has one element,
and @code{titln} is the title if sequence has multiple elements.
@end deftypefun

@defun ask_for_indi_list (String ttl, bool reask) @arrow{} INDISEQ
@end defun
@defun ask_for_indi_key (String ttl, ASK1Q ask1) @arrow{} String
@end defun
@defun ask_for_output_file (String mode, String ttl, String *pfname, String *pfullpath, String path, String ext) @arrow{} FILE*
@end defun
@defun ask_for_program (String mode, String ttl, String *pfname, String *pfullpath, String path, String ext, bool picklist) @arrow{} bool
@end defun
@defun chooseFromArray (String ttl, int no, String *pstrngs) @arrow{} int
@end defun
@defun prompt_stdout (String prompt) @arrow{} int
@end defun
@defun view_array (String ttl, int no, String *pstrngs) @arrow{} void
@end defun

@chapter Build System

@section Building From A Git Checkout
If you checkout a Git repository, you will initially be missing
several things.

First, you will notice that @code{configure.ac} is present in the
top-level directory, but there is no @command{configure} present in
the tree.  Run @command{autoconf} in the top level directory, with no
arguments, to generate the @command{configure} command.

Unless you edit @code{configue.ac} or one of the files in
@file{build}, this is a one-time thing.  In a release tar ball, it
will have been done for you.

Next, when building, many of the C files include @file{config.h}.
Which is generated, by @command{configure}, from a template
@file{config.h.in}.  The template is generated by
@command{autoheader}.  Like @command{autoconf}, it is run in the
top-level directory with no arguments.

And like the creation of @command{configure}, unless you edit
@code{configue.ac} or one of the files in @file{build}, this is a
one-time thing.  In a release tar ball, it will have been done for
you.

Lastly, you need to generate the @file{Makefile.in} files.  Which will
be used by @command{configure} to generate the @file{Makefile} files.
To generate the @file{Makefile}s, you run @command{automake}, in the
top level directory, with no arguments (sound familiar?).

If you add or delete files from the build or want to change
compilation options, do it in @file{Makefile.am}, not
@file{Makefile.in} or your changes will be lost the next time that you
run @command{automake}.

At this point, you have the files that are absent from a Git
repository but present in a release tar ball.

@section Building From a Release tar ball

If you received a release tar ball, then untar it somewhere.

Make a directory where you want to have the build files.  While
building within the source tree is supported, it is @b{strongly}
discouraged.

If you are unfamiliar with @command{configure}, or just want to see
what @command{configure} options are specific to the DeadEnds
particular instance of @command{configure}, invoke it with
@code{--help}.

A DeadEnds specific @command{configure} option is @code{--with-python}
which specifies whether to include Python 3 support.  Its default
value is @code{auto}.

A very common option is @code{--prefix}, which has a default value of
@file{/usr/local}.

So, do something like:

@command{mkdir} @i{some-directory}

@command{cd} @i{some-directory}

@i{/path/to/source/tree}@command{/configure} @i{options-you-want-to-give-to-configure}

@command{make}

@command{make install}

@unnumbered Function, Variable, and Type Index
@printindex fn
@bye
