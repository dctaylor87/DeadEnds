@section import.h / import.c

@defun getDatabaseFromFile (CString path, int vcodes, ErrorLog* errlog) @arrow{} Database*
Reads the @code{GEDCOM} file found in @code{path}, creates a database
and returns it.  If errors occur, null is returned and the errors are
logged in @code{errlog}.
@end defun

@defun getRecordListFromFile (CString path, IntegerTable* keymap, ErrorLog* elog) @arrow{} RootList*
This is used by the @acronym{GEDCOM} import code and when editing a
database, whether to modify existing records or to add new records.
@end defun

@section keylist.h

@defun insertInRootList (RootList*, GNode*) @arrow{} void
Insert a new root GNode* into a RootList.
@end defun

@section refnindex.h

@defun addToRefnIndex (RefnIndex* index, CString refn, CString key) @arrow{} bool
Adds the REFN @code{refn} present in the record having key @code{key} into 
the RefnIndex @code{index}.
@end defun
@defun searchRefnIndex (RefnIndex* index, CString refn) @arrow{} CString
Searches RefnIndex @code{index} for REFN @code{refn}.  If found, it
returns its key, otherwise it returns null.
@end defun

@section database.h / database.c

Database *currentDatabase

@defun deleteDatabase (Database* database) @arrow{} void
Delete a database, freeeing its memory.  It is the the caller's
responsibility to ensure that the database is not in use before
deleting it.
@end defun
@defun numberPersons (Database* database) @arrow{} int
Return the number of person records in the database.
@end defun
@defun numberFamilies (Database* database) @arrow{} int
Return the number of family records in the database.
@end defun
@defun numberSources (Database* database) @arrow{} int
Return the number of source records in the database.
@end defun
@defun numberEvents (Database* database) @arrow{} int
Return the number of event records in the database.
@end defun
@defun numberOthers (Database* database) @arrow{} int
Return the number of other records in the database.
@end defun
@defun keyToPerson (CString key, RecordIndex* index) @arrow{} GNode*
Get a person from record index.
@end defun
@defun keyToFamily (CString key, RecordIndex* index) @arrow{} GNode*
Get a family GNode from a RecordIndex.
@end defun
@defun getRecord (CString key, RecordIndex* index) @arrow{} GNode*
Get an arbitraray record from the database.
@end defun
@defun keyToPersonRecord (CString key, Database* database) @arrow{} GNode*
Looks for @code{key} in @code{database}, if found and it is a person
record, it is returned.  Otherwise @code{null} is returned.
@end defun
@defun keyToFamilyRecord (CString key, Database* database) @arrow{} GNode*
Looks for @code{key} in @code{database}, if found and it is a family
record, it is returned.  Otherwise @code{null} is returned.
@end defun
@defun keyToSourceRecord (CString key, Database* database) @arrow{} GNode*
Looks for @code{key} in @code{database}, if found and it is a source
record, it is returned.  Otherwise @code{null} is returned.
@end defun
@defun keyToEventRecord (CString key, Database* database) @arrow{} GNode*
Looks for @code{key} in @code{database}, if found and it is an event
record, it is returned.  Otherwise @code{null} is returned.
@end defun
@defun keyToOtherRecord (CString Key, Database* database) @arrow{} GNode*
Looks for @code{key} in @code{database}, if found and it is an other
record, it is returned.  Otherwise @code{null} is returned.
@end defun
@defun storeRecord (Database*, GNode*) @arrow{} bool
Add a record to the database.
@end defun

@section recordindex.h

@defun addToRecordIndex (RecordIndex*, GNode* root) @arrow{} void
@end defun
@defun addrefRecord (GNode *element) @arrow{} void
@end defun
@defun releaseRecord (GNode *element) @arrow{} void
@end defun

@section nameindex.h

@defun createNameIndex (void) @arrow{} NameIndex*
Creates a new empty NameIndex and returns it.

Used in creating a new database and for some specialized operations,
such as rekeying a database.  Most applications will probably not need
to call this directly.

@end defun
@defun deleteNameIndex (NameIndex* nameIndex) @arrow{} void
Called as part of deleting a database.  Unless you created the
NameIndex @code{nameIndex}, via a call to @code{createNameIndex}, you
probably don't need to call this.
@end defun
@defun insertInNameIndex (NameIndex* index, CString nameKey, CString personKey) @arrow{} void
Adds @code{personKey} to the set of keys returned when @code{index} is
searched for @code{nameKey}.
@end defun
@defun removeFromNameIndex (NameIndex *index, CString namekey, CString recordKey) @arrow{} void
Removes @code{recordKey} from @code{nameKey} in @code{index}.
@end defun
@defun removeNamesOfPersonFromIndex (NameIndex* index, GNode* person) @arrow{} void
@end defun
@defun searchNameIndex (NameIndex*, CString) @arrow{} Set*
@end defun
