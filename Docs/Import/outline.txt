 The "Import Stack" as of 21 December 2024
---------------------------------------------------------------
I. List* getDatabasesFromFiles(*paths, int vcodes, *errlog) -- Import List of Databases from Gedcom files
    1. Create a list of databases.
    2. Call {getDatabaseFromFile} on each file and add returned Database to the list.
    3. Return the list of databases.
    ** Databases with errors are not created.

II. Database* getDatabaseFromFile(String path, int validCodes, ErrorLog* elog) {
    1. Create the (empty) personRoots, familyRoots and keymap.
    2. Call {getRecordIndexFromFile} to get the RecordIndex of records in the file, passing down the
       empty root lists and keymap. If there are errors return null.
    3. Create the Database and init its RecordIndex and RootList properties.
    4. Call {getNameIndex} to set the Database's nameIndex property.
    5. Call {getRefnIndex} to set the Database's refnIndex property.
    6. FUTURE: Run list of DBaseActions.
    7. If there were errors delete the database and return null.
    8. Return Database.
NOTE: I thind the creating of the personRoots and familyRoots should be pulled up into getDatabaseFromFile. Getting the
  RecordIndex doesn't seem to be place where these should be created.

III. RecordIndex* getRecordIndexFromFile(String path, RootList* personRoots, RootList* familyRoots,
  IntegerTable* keymap, ErrorLog* elog) {
    1. Open file and return error if not found.
    2. If keymap is null create it here. (NOTE: in this case it is not freed).
    3. Call {getRootListFromFile} to get the list of records.
    4. Close the file.
    5. If there are no records or there are errors return null.
    6. Call {checkKeysAndReferences} to check that the record keys are closed. If errors return null.
    7. Call {createRecordIndex} to create an empty record index.
    8. For each record in the list of records:
        a. If it has a key add it to the record index
        b. If it is a person and personRoots is not null add it to personRoots.
        c. If it is a family and familyRoots is not null add it to familyRoots.
    9. Delete the list of records (NOTE: THIS GETS RID OF THE HEADER. FIX THIS.)
   10. Validate the persons.
   11. Validate the families.
   12. Return the record index and personRoots and familyRoots.

IV. RootList* getRootListFromFile(*file, *keymap, *errlog) -- Get the RootList of all records in a Gedcom file.
    1. Call {getGNodeListFromFile} to get the GNodeList of all Gedcom lines as nodes; has levels.
    2. Call {getRootListFromGNodeList} to convert the GNodeList of nodes to a RootList of node trees.
    3. Return the list of record roots.
    ** If an error occurs update the error log and return null.

V. GNodeList* getGNodeListFromFile(*file, *keymap, *errlog) -- Get the GNodeList of all nodes in a file.
    1. Create the GNodeList.
    2. Iteratively call {fileToLine} to get each lineno, level, key, tag, and value from file. Then:
        a. Create a node for the line from the key, tag and value (to be only copy anywhere!).
        b. Create a GNodeListEl with the node and level.
        c. If the node has a key add a mapping to the keymap.
        d. If any errors occur add them to the log
    3. Return the GNodeList if there were no errors; null otherwise.

VI. GNodeList* getRootListFromGNodeList(*nodes, name, *elog) -- Get RootList of all trees from GNodeList of all nodes.
    1. Init state machine variables.
    2. Set state to Initial (others are Main and Error).
    3. Iterate the list of nodes doing::
        a. Set the prev variables to curr variables.
        b. Get the curr variables.
        c. Depending on state do:
            1. Initial:
                a. If level 0 set the first root node and goto Main; else goto Error.
            2. Main:
                In cases a, b, c, & d, stay in Main.
                a. if level is 0:
                    1. add root (of tree just built) to list of trees.
                    2. set curr node as root of next tree.
                b. if level is same as prev (can't be 0):
                    1. make curr node the sib of the prev.
                c. if level is one more than last node:
                    1. make curr node the child of the prev.
                d. if the level is less that the prev node:
                    1. make curr node the sib of an ancestor of the prev.
                    2. infinite loop check done when looking for ancestor.
                e. else level is more than one larger than last:
                    1. add error and go to Error.
            3. Error.
                a. if level 0 goto Main; else remain in Error.
    4. If in Main at end add last tree to list of trees.
    5. Return the list of trees.

void checkKeysAndReferences(*trees, name, *keymap, *errlog) -- Check all root keys and their references for closure.
    1. Create a set to hold all keys seen.
    2. Check each tree root:
        a. If it doesn't have a key but should add an error to the log.
        b. If it has a key that has been seen before add an error to the log.
        c. Add the key to the set of seen keys.
    3. Check all occurrences of keys as values doing the following::
        a. add to numReferences (debugging).
        b. if the key is not in the set of seen keys add an error to the log.
    4. Delete the seen set.

--------------------------------------------------------

List* getDatabasesFromFiles(*paths, int vcodes, *errlog) -- Import List of Databases from Gedcom files
    Database* getDatabaseFromFile(String path, int validCodes, ErrorLog* elog) {
        RecordIndex* getRecordIndexFromFile(String path, RootList* personRoots, RootList* familyRoots,
            GNodeList* getRootListFromFile(*file, *keymap, *errlog) -- Get the GNodeList of all records in a Gedcom file.
                GNodeList* getGNodeListFromFile(*file, *keymap, *errlog) -- Get the GNodeList of all nodes in a file.
                GNodeList* getRootListFromNodeList(*nodes, name, *elog) -- Get list of all trees from list of all nodes.
