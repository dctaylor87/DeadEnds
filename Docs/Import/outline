Code from import.c:

List* gedcomFilesToDatabases(List* paths, ErrorLog* elog) -- Imports a List of Gedcom files to a List of Databases.
	1. Creates a List of Databases.
	2. Calls gedcomFileToDatabase on each file.
	3. Returns the List of Databases

Database* gedcomFileToDatabase(String path, ErrorLog* eog) -- Creates and returns the Database of a single Gedcom file
	1. Opens the file
	2. Create the keymap Integer table to track the line where each record begins.
	3. Calls getGNodeTreesFromFile to get the full List of records from the file.
	4. Close the file.
	5. Calls checkKeysAndReferences to make sure the records are "closed".
	6. Create the Database.
	7. Validate the persons and families in the database.
	8. Create the name index.
	9. Validate the user references.
	10. Return the Database.
	** If errors occur at any point clean up and return null.

void checkKeysAndReferences(GNodeList* records, String name, IntegerTable* keymap, ErrorLog* log) -- Checks record keys and their
	references for closure.
	1. Create a set to hold all keys seen.
	2. Check each record:
		a. If it doesn't have a key but should add an error to the log.
		b. If its key has been seen before add an error to the log.
		c. Add the key to the seen set
	3. Check all occurrences of keys as values doing the following::
		a. add to numReferences (debugging).
		b. if the key is not in the seen set add an error to the log.
	4. Delete the seen set.

Code from gnodelist.c

GNodeListEl* createGNodeListEl(GNode* gnode, void* data) -- Creates and returns a GNodeListEl
	1. Allocates the memory for a GNode*, void* pair).
	2. Puts the arguments, as-is, into the memory.
	3. Returns the new element.

static void delete(void* element) -- the delete function for GNodeListEls
	n. If frees only the element, not what the element might point to.

GNodeList* createGNodeList(void) -- creates and returns a new GNodeList with the above getKey function.
	NOTE: THE DELETE FUNCTION IS NOT CORRECT FOR THE LATEST REDESIGN

void appendToGNodeList(GNodeList* list, GNode* gnode, void* data) -- adds a new element to a GNodeList.
	n. Just a pass through to appendToList.

void deleteGNodeList(GNodeList* list, void(*delete)(void*)) -- deletes a GNodeList
	n. User must pass in a delete function.

static void deleteEl(void* el) { stdfree(el); } -- generic deleter for GNodeList elements
	n. CONSOLIDATE THE DELETE FUNCTIONS SOMEHOW

GNodeList* getGNodeTreesFromFile(File*, IntegerTable* keymap, ErrorLog*) -- gets the GNodeList of all records from
	n. Called by gedcomFileToDatabase.
	n. Called by main programs (that don't need full databases) that must supply the keymap.
	1. Calls getGNodeListFromFile to get the list of all Gedcom lines; has the levels.
	2. Calls getGNodeTreesFromNodeList to convert the list of nodes to a list of records.
	3. If there were errors things are handled and null is returned.

GNodeList* getGNodeListFromFile(File*, IntegerTable* keymap, ErrorLog*) -- uses fileToLine and extractFields to create a list
	of all GNodes from the file.
	1. Create the GNodeList.
        2. Iteratively call fileToLine to get each linenumber, level, key, tag, and value from the file. For each:
		a. Create a GNode for the line (this should be the only copy of this line!).
		b. Create a GNodeListEl from the GNode and the level.
		c. Add an entry to the keymap with the current key and current line number.
		d. If any errors occur add them to the log
	3. Return the GNodeList if there were no errors; null otherwise.

GNodeList* getGNodeTreesFromString(String, String name, ErrorLog*) -- returns a list of records from a String.
	n. Interface is out of date due to recent changes.
	1. Call getGNodeListFromString to get the GNodeList of all GNodes in the string
	2. Call getGNodeTreesFromNodeList to get the GNodeList of records from the list of GNodes.
	3. If there were errors clean up and return null; else returns the list of records.
	n. Cleanup is out of date due to recent changes.

GNodeList* getGNodeListFromString(String string, ErrorLog* errorLog) -- returns the full list of GNodes from a String.
	n. Interface is out of date due to recent changes.
	1. Create a GNodeList to hold the GNodes.
	2. Iteratively call stringToLine to get each linenumber, level, key, tag, and value from the string. For each:
		a. Create a GNode for the list.
		b. Create a GNodeListEl from the GNode and the level.
		c. SHOULD ADD AN ENTRY TO THE KEYMAP BUT DON'T.
		d. If errors occur clean up and return null.
	3. Return the GNodeList if there were no errors; null otherwise.
}

void showGNodeList(GNodeList*) -- debugging function that shows the contents of a GNodeList.
	1. For each GNode call the showGNode function.

GNodeList* getGNodeTreesFromNodeList(GNodeList*, String name, IntegerTable* keymap, ErrorLog*) -- Converts a list of all GNodes
	into a list of GNode roots/records using a simple state machine.
	1. Set up the variables maintained by the machine.
	2. The state machine has three states -- Initial, Main, and Error.
	3. Iterate the list of GNodes doing the following:
		a. Set the previous variables to the current variables.
		b. Get the next current node.
		c. For each state do:
			1. Initial state: 
				a. If level is 0 set the first root node and go to Main; else to Error.
			2. Main state:
				n. in cases a, b, c, & d, stay in Main state and modify the loop variables.
				a. if level is 0:
					1. add root to list of records.
				b. if level is same as last node:
					1. make current node the sibling of the previous.
				c. if level is one more than last node:
					1. make current node the child of the previous.
				d. if the level is less that the prev node:
					1. make current node a sibling of an ancestor of the previous.
					2. infinite loop check in case parent links get messed up.
				e. anything else (level more than one larger than last) 
					1. add error and go to Error state.
			3. Error state.
				1. if level is non-zero state in Error, else go to Main
	4. At end of iteration if in Main stage add the last root ot the list
	5. Return the list of roots.

void writeGNodeTreesToFile(GNodeList* list, File* file) -- Writes a GNodeList to a File in Gedcom format.
	1. For each GNode root in the list:
		a. Call writeGNodeRecord to write the record.
